var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import generateRandomString from '@d-fischer/randomstring';
import * as crypto from 'crypto';
/**
 * @hideProtected
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var Subscription = /** @class */ (function () {
    /** @private */
    function Subscription(_handler, _client, _validityInSeconds) {
        if (_validityInSeconds === void 0) { _validityInSeconds = 100000; }
        this._handler = _handler;
        this._client = _client;
        this._validityInSeconds = _validityInSeconds;
        this._verified = false;
    }
    Object.defineProperty(Subscription.prototype, "verified", {
        /**
         * Whether the subscription has been verified by Twitch.
         */
        get: function () {
            return this._verified;
        },
        enumerable: true,
        configurable: true
    });
    /** @private */
    Subscription.prototype._verify = function () {
        this._verified = true;
    };
    /** @private */
    Subscription.prototype._generateNewCredentials = function () {
        this._secret = generateRandomString(16);
    };
    /** @private */
    Subscription.prototype._handleData = function (data, algoAndSignature) {
        var _a = __read(algoAndSignature.split('=', 2), 2), algorithm = _a[0], signature = _a[1];
        var hash = crypto.createHmac(algorithm, this._secret).update(data).digest('hex');
        if (hash === signature) {
            this._handler(this.transformData(JSON.parse(data)));
            return true;
        }
        return false;
    };
    /**
     * Activates the subscription.
     */
    Subscription.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._refreshTimer) {
                            clearInterval(this._refreshTimer);
                        }
                        return [4 /*yield*/, this._createNewSubscription()];
                    case 1:
                        _a.sent();
                        this._refreshTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._createNewSubscription()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, this._validityInSeconds * 800); // refresh a little bit faster than we could theoretically make work, but in millis
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Suspends the subscription, not removing it from the listener.
     */
    Subscription.prototype.suspend = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._refreshTimer) {
                            clearInterval(this._refreshTimer);
                            this._refreshTimer = undefined;
                        }
                        return [4 /*yield*/, this._unsubscribe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deactivates the subscription and removes it from the listener.
     */
    Subscription.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suspend()];
                    case 1:
                        _a.sent();
                        this._client._dropSubscription(this.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    Subscription.prototype._getOptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this._client._buildHookUrl(this.id)];
                    case 1: return [2 /*return*/, (_a.callbackUrl = _b.sent(),
                            _a.secret = this._secret,
                            _a.validityInSeconds = this._validityInSeconds,
                            _a)];
                }
            });
        });
    };
    Subscription.prototype._createNewSubscription = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._generateNewCredentials();
                        return [4 /*yield*/, this._subscribe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Subscription;
}());
export default Subscription;
