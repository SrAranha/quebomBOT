var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import ReverseProxyAdapter from "./ReverseProxyAdapter.mjs";
/**
 * A connection adapter that reads the port to listen on from the environment.
 *
 * @hideProtected
 */
var EnvPortAdapter = /** @class */ (function (_super) {
    __extends(EnvPortAdapter, _super);
    /**
     * Creates a new environment port connection adapter.
     *
     * @expandParams
     *
     * @param options
     */
    function EnvPortAdapter(options) {
        var _this = this;
        var _a = options.variableName, variableName = _a === void 0 ? 'PORT' : _a, otherOptions = __rest(options, ["variableName"]);
        var listenerPort = Number(process.env[variableName || 'PORT']);
        if (Number.isNaN(listenerPort)) {
            throw new Error("The environment variable \"" + variableName + "\" does not contain a number");
        }
        _this = _super.call(this, __assign({ listenerPort: listenerPort }, otherOptions)) || this;
        return _this;
    }
    return EnvPortAdapter;
}(ReverseProxyAdapter));
export default EnvPortAdapter;
