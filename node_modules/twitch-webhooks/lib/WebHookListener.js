"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var logger_1 = require("@d-fischer/logger");
var raw_body_1 = require("@d-fischer/raw-body");
var httpanda_1 = require("httpanda");
var twitch_1 = require("twitch");
var LegacyAdapter_1 = require("./Adapters/LegacyAdapter");
var BanEventSubscription_1 = require("./Subscriptions/BanEventSubscription");
var ExtensionTransactionSubscription_1 = require("./Subscriptions/ExtensionTransactionSubscription");
var FollowsFromUserSubscription_1 = require("./Subscriptions/FollowsFromUserSubscription");
var FollowsToUserSubscription_1 = require("./Subscriptions/FollowsToUserSubscription");
var ModeratorEventSubscription_1 = require("./Subscriptions/ModeratorEventSubscription");
var StreamChangeSubscription_1 = require("./Subscriptions/StreamChangeSubscription");
var SubscriptionEventSubscription_1 = require("./Subscriptions/SubscriptionEventSubscription");
var UserChangeSubscription_1 = require("./Subscriptions/UserChangeSubscription");
/**
 * A WebHook listener you can track changes in various channel and user data with.
 */
var WebHookListener = /** @class */ (function () {
    /**
     * Creates a new WebHook listener.
     *
     * @param twitchClient The TwitchClient instance to use for user info and API requests.
     * @param adapter The connection adapter.
     * @param config
     */
    function WebHookListener(twitchClient, adapter, config) {
        if (config === void 0) { config = {}; }
        var _a;
        this._subscriptions = new Map();
        this._twitchClient = twitchClient;
        this._adapter = adapter;
        this._hookValidity = config.hookValidity;
        this._logger = new logger_1.default(tslib_1.__assign({ name: 'twitch-webhooks', emoji: true }, (_a = config.logger, (_a !== null && _a !== void 0 ? _a : {}))));
    }
    /**
     * Creates a new WebHook listener.
     *
     * @deprecated Use the normal constructor instead.
     *
     * @param twitchClient The TwitchClient instance to use for user info and API requests.
     * @param config
     */
    WebHookListener.create = function (twitchClient, config) {
        if (config === void 0) { config = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var adapter;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LegacyAdapter_1.default.create(config)];
                    case 1:
                        adapter = _a.sent();
                        return [2 /*return*/, new WebHookListener(twitchClient, adapter, config)];
                }
            });
        });
    };
    /**
     * Starts the backing server and listens to incoming WebHook notifications.
     */
    WebHookListener.prototype.listen = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var server, listenerPort;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._server) {
                            throw new Error('Trying to listen while already listening');
                        }
                        server = this._adapter.createHttpServer();
                        this._server = new httpanda_1.Server({
                            server: server,
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            onError: function (e, req) {
                                if (e.code === 404) {
                                    _this._logger.warn("Access to unknown URL/method attempted: " + req.method + " " + req.url);
                                }
                            }
                        });
                        // needs to be first in chain but run last, for proper logging of status
                        this._server.use(function (req, res, next) {
                            setImmediate(function () {
                                _this._logger.debug(req.method + " " + req.path + " - " + res.statusCode);
                            });
                            next();
                        });
                        this._server.all('/:id', this._createHandleRequest());
                        return [4 /*yield*/, this._adapter.getListenerPort()];
                    case 1:
                        listenerPort = _a.sent();
                        return [4 /*yield*/, this._server.listen(listenerPort)];
                    case 2:
                        _a.sent();
                        this._logger.info("Listening on port " + listenerPort);
                        return [4 /*yield*/, Promise.all(tslib_1.__spread(this._subscriptions.values()).map(function (sub) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/, sub.start()];
                            }); }); }))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stops the backing server, suspending all active subscriptions.
     */
    WebHookListener.prototype.unlisten = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._server) {
                            throw new Error('Trying to unlisten while not listening');
                        }
                        return [4 /*yield*/, this._server.close()];
                    case 1:
                        _a.sent();
                        this._server = undefined;
                        return [4 /*yield*/, Promise.all(tslib_1.__spread(this._subscriptions.values()).map(function (sub) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/, sub.suspend()];
                            }); }); }))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Applies middleware that handles WebHooks to a connect-compatible app (like express).
     *
     * @param app The app the middleware should be applied to.
     */
    WebHookListener.prototype.applyMiddleware = function (app) {
        var pathPrefix = this._adapter.pathPrefix;
        if (pathPrefix) {
            pathPrefix = "/" + pathPrefix.replace(/^\/|\/$/, '');
        }
        var paramParser = function (req, res, next) {
            var _a = tslib_1.__read(req.path.split('/'), 2), id = _a[1];
            req.param = req.params = { id: id };
            next();
        };
        var requestHandler = this._createHandleRequest();
        if (pathPrefix) {
            app.use(pathPrefix, paramParser, requestHandler);
        }
        else {
            app.use(paramParser, requestHandler);
        }
    };
    /**
     * Subscribes to events representing a user changing a public setting or their email address.
     *
     * @param user The user for which to get notifications about changing a setting.
     * @param handler The function that will be called for any new notifications.
     * @param withEmail Whether to subscribe to email address changes. This requires an additional scope (user:read:email).
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToUserChanges = function (user, handler, withEmail, validityInSeconds) {
        if (withEmail === void 0) { withEmail = false; }
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = twitch_1.extractUserId(user);
                        subscription = new UserChangeSubscription_1.default(userId, handler, withEmail, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing a user being followed by other users.
     *
     * @param user The user for which to get notifications about the users they will be followed by.
     * @param handler The function that will be called for any new notifications.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToFollowsToUser = function (user, handler, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = twitch_1.extractUserId(user);
                        subscription = new FollowsToUserSubscription_1.default(userId, handler, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing a user following other users.
     *
     * @param user The user for which to get notifications about the users they will follow.
     * @param handler The function that will be called for any new notifications.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToFollowsFromUser = function (user, handler, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = twitch_1.extractUserId(user);
                        subscription = new FollowsFromUserSubscription_1.default(userId, handler, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing a stream changing, i.e. going live, offline or changing its title or category.
     *
     * @param user The user for which to get notifications about their streams changing.
     * @param handler The function that will be called for any new notifications.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToStreamChanges = function (user, handler, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = twitch_1.extractUserId(user);
                        subscription = new StreamChangeSubscription_1.default(userId, handler, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing the start or end of a channel subscription.
     *
     * @param user The user for which to get notifications about subscriptions to their channel.
     * @param handler The function that will be called for any new notifications.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToSubscriptionEvents = function (user, handler, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = twitch_1.extractUserId(user);
                        subscription = new SubscriptionEventSubscription_1.default(userId, handler, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing a ban or unban.
     *
     * @param broadcaster The broadcaster for which to get notifications about bans or unbans in their channel.
     * @param handler The function that will be called for any new notifications.
     * @param user The user that events will be sent for. If not given, events will be sent for all users.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToBanEvents = function (broadcaster, handler, user, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var broadcasterId, userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        broadcasterId = twitch_1.extractUserId(broadcaster);
                        userId = user ? twitch_1.extractUserId(user) : undefined;
                        subscription = new BanEventSubscription_1.default(broadcasterId, handler, this, userId, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to events representing a user gaining or losing moderator privileges in a channel.
     *
     * @param broadcaster The broadcaster for which to get notifications about moderator changes in their channel.
     * @param handler The function that will be called for any new notifications.
     * @param user The user that events will be sent for. If not given, events will be sent for all users.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToModeratorEvents = function (broadcaster, handler, user, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var broadcasterId, userId, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        broadcasterId = twitch_1.extractUserId(broadcaster);
                        userId = user ? twitch_1.extractUserId(user) : undefined;
                        subscription = new ModeratorEventSubscription_1.default(broadcasterId, handler, this, userId, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /**
     * Subscribes to extension transactions.
     *
     * @param extensionId The extension ID for which to get notifications about transactions.
     * @param handler The function that will be called for any new notifications.
     * @param validityInSeconds The validity of the WebHook, in seconds.
     *
     * Please note that this doesn't mean that you don't get any notifications after the given time. The hook will be automatically refreshed.
     *
     * This is meant for debugging issues. Please don't set it unless you know what you're doing.
     */
    WebHookListener.prototype.subscribeToExtensionTransactions = function (extensionId, handler, validityInSeconds) {
        if (validityInSeconds === void 0) { validityInSeconds = this._hookValidity; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subscription = new ExtensionTransactionSubscription_1.default(extensionId, handler, this, validityInSeconds);
                        return [4 /*yield*/, subscription.start()];
                    case 1:
                        _a.sent();
                        this._subscriptions.set(subscription.id, subscription);
                        return [2 /*return*/, subscription];
                }
            });
        });
    };
    /** @private */
    WebHookListener.prototype._buildHookUrl = function (id) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var protocol, hostName, externalPort, protocolDefaultPort, hostPortion, pathPrefix;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        protocol = this._adapter.connectUsingSsl ? 'https' : 'http';
                        return [4 /*yield*/, this._adapter.getHostName()];
                    case 1:
                        hostName = _b.sent();
                        return [4 /*yield*/, this._adapter.getExternalPort()];
                    case 2:
                        externalPort = _b.sent();
                        protocolDefaultPort = this._adapter.connectUsingSsl ? 443 : 80;
                        hostPortion = externalPort === protocolDefaultPort ? hostName : hostName + ":" + externalPort;
                        pathPrefix = (_a = this._adapter.pathPrefix) === null || _a === void 0 ? void 0 : _a.replace(/^\/|\/$/, '');
                        return [2 /*return*/, protocol + "://" + hostPortion + (pathPrefix ? '/' : '') + (pathPrefix !== null && pathPrefix !== void 0 ? pathPrefix : '') + "/" + id];
                }
            });
        });
    };
    /** @private */
    WebHookListener.prototype._changeIdOfSubscription = function (oldId, newId) {
        var sub = this._subscriptions.get(oldId);
        if (sub) {
            this._subscriptions.delete(oldId);
            this._subscriptions.set(newId, sub);
        }
    };
    /** @private */
    WebHookListener.prototype._dropSubscription = function (id) {
        this._subscriptions.delete(id);
    };
    WebHookListener.prototype._createHandleRequest = function () {
        var _this = this;
        return function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(req.method === 'GET')) return [3 /*break*/, 1];
                        this._handleVerification(req, res);
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(req.method === 'POST')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._handleNotification(req, res)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        next();
                        return [2 /*return*/];
                }
            });
        }); };
    };
    WebHookListener.prototype._handleVerification = function (req, res) {
        var _a;
        var id = req.param.id;
        var subscription = this._subscriptions.get(id);
        if (subscription) {
            var hubMode = (_a = req.query) === null || _a === void 0 ? void 0 : _a['hub.mode'];
            if (hubMode === 'subscribe') {
                subscription._verify();
                res.writeHead(202);
                res.end(req.query['hub.challenge']);
                this._logger.debug("Successfully subscribed to hook: " + id);
            }
            else if (hubMode === 'unsubscribe') {
                this._subscriptions.delete(id);
                res.writeHead(200);
                res.end();
                this._logger.debug("Successfully unsubscribed from hook: " + id);
            }
            else if (hubMode === 'denied') {
                this._logger.error("Subscription denied to hook: " + id + " (" + req.query['hub.reason'] + ")");
                res.writeHead(200);
                res.end();
            }
            else {
                this._logger.warn("Unknown hub.mode " + hubMode + " for hook: " + id);
                res.writeHead(400);
                res.end();
            }
        }
        else {
            this._logger.warn("Verification of unknown hook attempted: " + id);
            res.writeHead(410);
            res.end();
        }
    };
    WebHookListener.prototype._handleNotification = function (req, res) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var body, id, subscription;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, raw_body_1.default(req, true)];
                    case 1:
                        body = _a.sent();
                        id = req.param.id;
                        subscription = this._subscriptions.get(id);
                        if (subscription) {
                            res.writeHead(202);
                            res.end();
                            if (subscription._handleData(body, req.headers['x-hub-signature'])) {
                                this._logger.debug("Successfully verified notification signature for hook: " + id);
                            }
                            else {
                                this._logger.warn("Failed to verify notification signature for hook: " + id + ". " +
                                    'This might be caused by Twitch still sending notifications with an old secret and is perfectly normal a few times after you just restarted the script.\n' +
                                    'If the problem persists over a long period of time, please file an issue.');
                            }
                        }
                        else {
                            this._logger.warn("Notification for unknown hook received: " + id);
                            res.writeHead(410);
                            res.end();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return WebHookListener;
}());
exports.default = WebHookListener;
module.exports = exports = WebHookListener;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebHookListener;
