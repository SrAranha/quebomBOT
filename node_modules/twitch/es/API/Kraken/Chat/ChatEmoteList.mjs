var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Cacheable, Cached, CachedGetter } from '@d-fischer/cache-decorators';
import { NonEnumerable } from '@d-fischer/shared-utils';
import ChatEmote from "./ChatEmote.mjs";
/**
 * A list of emotes.
 */
var ChatEmoteList = /** @class */ (function () {
    /** @private */
    function ChatEmoteList(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(ChatEmoteList.prototype, "emotes", {
        /**
         * A list of all emotes in the list.
         */
        get: function () {
            var _this = this;
            return this._data.map(function (emote) { return new ChatEmote(emote, _this._client); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets all emotes from the list that are from a given emote set.
     *
     * @param setId
     */
    ChatEmoteList.prototype.getAllFromSet = function (setId) {
        var _this = this;
        return this._data
            .filter(function (emote) { return emote.emoticon_set === setId; })
            .map(function (emote) { return new ChatEmote(emote, _this._client); });
    };
    /**
     * Finds a single emote by its ID.
     *
     * @param id
     */
    ChatEmoteList.prototype.getById = function (id) {
        var data = this._data.find(function (emote) { return emote.id === id; });
        return data ? new ChatEmote(data, this._client) : null;
    };
    __decorate([
        NonEnumerable
    ], ChatEmoteList.prototype, "_client", void 0);
    __decorate([
        CachedGetter()
    ], ChatEmoteList.prototype, "emotes", null);
    __decorate([
        Cached()
    ], ChatEmoteList.prototype, "getAllFromSet", null);
    __decorate([
        Cached()
    ], ChatEmoteList.prototype, "getById", null);
    ChatEmoteList = __decorate([
        Cacheable
    ], ChatEmoteList);
    return ChatEmoteList;
}());
export default ChatEmoteList;
