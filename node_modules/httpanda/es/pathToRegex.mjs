var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
export function pathToRegex(path, strict) {
    var e_1, _a;
    if (strict === void 0) { strict = true; }
    var parts = path.split('/');
    var paramNames = [];
    var pathComponents = 0;
    var re = '^';
    try {
        for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
            var part = parts_1_1.value;
            if (part) {
                pathComponents++;
                if (part[0] === ':') {
                    paramNames.push(part.substr(1));
                    re += '/([^/]+?)';
                }
                else {
                    re += "/" + part;
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    re += strict ? '/?$' : '(?=/|$)';
    return [new RegExp(re), paramNames, pathComponents];
}
//# sourceMappingURL=pathToRegex.mjs.map